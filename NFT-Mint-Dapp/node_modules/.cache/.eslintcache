[{"C:\\Users\\kayha\\OneDrive\\Desktop\\NFT-Mint-Dapp\\src\\index.js":"1","C:\\Users\\kayha\\OneDrive\\Desktop\\NFT-Mint-Dapp\\src\\App.js":"2","C:\\Users\\kayha\\OneDrive\\Desktop\\NFT-Mint-Dapp\\src\\reportWebVitals.js":"3","C:\\Users\\kayha\\OneDrive\\Desktop\\NFT-Mint-Dapp\\src\\components\\SellNFT.js":"4","C:\\Users\\kayha\\OneDrive\\Desktop\\NFT-Mint-Dapp\\src\\components\\Profile.js":"5","C:\\Users\\kayha\\OneDrive\\Desktop\\NFT-Mint-Dapp\\src\\components\\Marketplace.js":"6","C:\\Users\\kayha\\OneDrive\\Desktop\\NFT-Mint-Dapp\\src\\components\\NFTpage.js":"7","C:\\Users\\kayha\\OneDrive\\Desktop\\NFT-Mint-Dapp\\src\\components\\Navbar.js":"8","C:\\Users\\kayha\\OneDrive\\Desktop\\NFT-Mint-Dapp\\src\\utils.js":"9","C:\\Users\\kayha\\OneDrive\\Desktop\\NFT-Mint-Dapp\\src\\pinata.js":"10","C:\\Users\\kayha\\OneDrive\\Desktop\\NFT-Mint-Dapp\\src\\components\\NFTTile.js":"11"},{"size":1087,"mtime":1682334767000,"results":"12","hashOfConfig":"13"},{"size":743,"mtime":1682334767000,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1682334767000,"results":"15","hashOfConfig":"13"},{"size":6589,"mtime":1682334767000,"results":"16","hashOfConfig":"13"},{"size":3734,"mtime":1682334767000,"results":"17","hashOfConfig":"13"},{"size":3280,"mtime":1682334767000,"results":"18","hashOfConfig":"13"},{"size":4283,"mtime":1682334767000,"results":"19","hashOfConfig":"13"},{"size":4297,"mtime":1698642586508,"results":"20","hashOfConfig":"13"},{"size":215,"mtime":1682334767000,"results":"21","hashOfConfig":"13"},{"size":2610,"mtime":1698646016703,"results":"22","hashOfConfig":"13"},{"size":974,"mtime":1682334767000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},"lxfukh",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"28"},"C:\\Users\\kayha\\OneDrive\\Desktop\\NFT-Mint-Dapp\\src\\index.js",["64"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n} from \"react-router-dom\";\nimport SellNFT from './components/SellNFT';\nimport Marketplace from './components/Marketplace';\nimport Profile from './components/Profile';\nimport NFTPage from './components/NFTpage';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<Marketplace />}/>\n        <Route path=\"/sellNFT\" element={<SellNFT />}/> \n        <Route path=\"/nftPage/:tokenId\" element={<NFTPage />}/>        \n        <Route path=\"/profile\" element={<Profile />}/> \n      </Routes>\n    </BrowserRouter>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",[],"C:\\Users\\kayha\\OneDrive\\Desktop\\NFT-Mint-Dapp\\src\\App.js",["65","66","67"],[],"import './App.css';\nimport Navbar from './components/Navbar.js';\nimport Marketplace from './components/Marketplace';\nimport Profile from './components/Profile';\nimport SellNFT from './components/SellNFT';\nimport NFTPage from './components/NFTpage';\nimport ReactDOM from \"react-dom/client\";\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n        <Routes>\n          <Route path=\"/\" element={<Marketplace />}/>\n          <Route path=\"/nftPage\" element={<NFTPage />}/>        \n          <Route path=\"/profile\" element={<Profile />}/>\n          <Route path=\"/sellNFT\" element={<SellNFT />}/>             \n        </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\kayha\\OneDrive\\Desktop\\NFT-Mint-Dapp\\src\\reportWebVitals.js",[],[],"C:\\Users\\kayha\\OneDrive\\Desktop\\NFT-Mint-Dapp\\src\\components\\SellNFT.js",["68"],[],"import Navbar from \"./Navbar\";\nimport { useState } from \"react\";\nimport { uploadFileToIPFS, uploadJSONToIPFS } from \"../pinata\";\nimport Marketplace from '../Marketplace.json';\nimport { useLocation } from \"react-router\";\n\nexport default function SellNFT () {\n    const [formParams, updateFormParams] = useState({ name: '', description: '', price: ''});\n    const [fileURL, setFileURL] = useState(null);\n    const ethers = require(\"ethers\");\n    const [message, updateMessage] = useState('');\n    const location = useLocation();\n\n    async function disableButton() {\n        const listButton = document.getElementById(\"list-button\")\n        listButton.disabled = true\n        listButton.style.backgroundColor = \"grey\";\n        listButton.style.opacity = 0.3;\n    }\n\n    async function enableButton() {\n        const listButton = document.getElementById(\"list-button\")\n        listButton.disabled = false\n        listButton.style.backgroundColor = \"#A500FF\";\n        listButton.style.opacity = 1;\n    }\n\n    //This function uploads the NFT image to IPFS\n    async function OnChangeFile(e) {\n        var file = e.target.files[0];\n        //check for file extension\n        try {\n            //upload the file to IPFS\n            disableButton();\n            updateMessage(\"Uploading image.. please dont click anything!\")\n            const response = await uploadFileToIPFS(file);\n            if(response.success === true) {\n                enableButton();\n                updateMessage(\"\")\n                console.log(\"Uploaded image to Pinata: \", response.pinataURL)\n                setFileURL(response.pinataURL);\n            }\n        }\n        catch(e) {\n            console.log(\"Error during file upload\", e);\n        }\n    }\n\n    //This function uploads the metadata to IPFS\n    async function uploadMetadataToIPFS() {\n        const {name, description, price} = formParams;\n        //Make sure that none of the fields are empty\n        if( !name || !description || !price || !fileURL)\n        {\n            updateMessage(\"Please fill all the fields!\")\n            return -1;\n        }\n\n        const nftJSON = {\n            name, description, price, image: fileURL\n        }\n\n        try {\n            //upload the metadata JSON to IPFS\n            const response = await uploadJSONToIPFS(nftJSON);\n            if(response.success === true){\n                console.log(\"Uploaded JSON to Pinata: \", response)\n                return response.pinataURL;\n            }\n        }\n        catch(e) {\n            console.log(\"error uploading JSON metadata:\", e)\n        }\n    }\n\n    async function listNFT(e) {\n        e.preventDefault();\n\n        //Upload data to IPFS\n        try {\n            const metadataURL = await uploadMetadataToIPFS();\n            if(metadataURL === -1)\n                return;\n            //After adding your Hardhat network to your metamask, this code will get providers and signers\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            disableButton();\n            updateMessage(\"Uploading NFT(takes 5 mins).. please dont click anything!\")\n\n            //Pull the deployed contract instance\n            let contract = new ethers.Contract(Marketplace.address, Marketplace.abi, signer)\n\n            //massage the params to be sent to the create NFT request\n            const price = ethers.utils.parseUnits(formParams.price, 'ether')\n            let listingPrice = await contract.getListPrice()\n            listingPrice = listingPrice.toString()\n\n            //actually create the NFT\n            let transaction = await contract.createToken(metadataURL, price, { value: listingPrice })\n            await transaction.wait()\n\n            alert(\"Successfully listed your NFT!\");\n            enableButton();\n            updateMessage(\"\");\n            updateFormParams({ name: '', description: '', price: ''});\n            window.location.replace(\"/\")\n        }\n        catch(e) {\n            alert( \"Upload error\"+e )\n        }\n    }\n\n    console.log(\"Working\", process.env);\n    return (\n        <div className=\"\">\n        <Navbar></Navbar>\n        <div className=\"flex flex-col place-items-center mt-10\" id=\"nftForm\">\n            <form className=\"bg-white shadow-md rounded px-8 pt-4 pb-8 mb-4\">\n            <h3 className=\"text-center font-bold text-purple-500 mb-8\">Upload your NFT to the marketplace</h3>\n                <div className=\"mb-4\">\n                    <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"name\">NFT Name</label>\n                    <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" id=\"name\" type=\"text\" placeholder=\"Axie#4563\" onChange={e => updateFormParams({...formParams, name: e.target.value})} value={formParams.name}></input>\n                </div>\n                <div className=\"mb-6\">\n                    <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"description\">NFT Description</label>\n                    <textarea className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" cols=\"40\" rows=\"5\" id=\"description\" type=\"text\" placeholder=\"Axie Infinity Collection\" value={formParams.description} onChange={e => updateFormParams({...formParams, description: e.target.value})}></textarea>\n                </div>\n                <div className=\"mb-6\">\n                    <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"price\">Price (in ETH)</label>\n                    <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" type=\"number\" placeholder=\"Min 0.01 ETH\" step=\"0.01\" value={formParams.price} onChange={e => updateFormParams({...formParams, price: e.target.value})}></input>\n                </div>\n                <div>\n                    <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"image\">Upload Image (&lt;500 KB)</label>\n                    <input type={\"file\"} onChange={OnChangeFile}></input>\n                </div>\n                <br></br>\n                <div className=\"text-red-500 text-center\">{message}</div>\n                <button onClick={listNFT} className=\"font-bold mt-10 w-full bg-purple-500 text-white rounded p-2 shadow-lg\" id=\"list-button\">\n                    List NFT\n                </button>\n            </form>\n        </div>\n        </div>\n    )\n}","C:\\Users\\kayha\\OneDrive\\Desktop\\NFT-Mint-Dapp\\src\\components\\Profile.js",["69","70"],[],"import Navbar from \"./Navbar\";\nimport { useLocation, useParams } from 'react-router-dom';\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport NFTTile from \"./NFTTile\";\n\nexport default function Profile () {\n    const [data, updateData] = useState([]);\n    const [dataFetched, updateFetched] = useState(false);\n    const [address, updateAddress] = useState(\"0x\");\n    const [totalPrice, updateTotalPrice] = useState(\"0\");\n\n    async function getNFTData(tokenId) {\n        const ethers = require(\"ethers\");\n        let sumPrice = 0;\n        //After adding your Hardhat network to your metamask, this code will get providers and signers\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const addr = await signer.getAddress();\n\n        //Pull the deployed contract instance\n        let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\n\n        //create an NFT Token\n        let transaction = await contract.getMyNFTs()\n\n        /*\n        * Below function takes the metadata from tokenURI and the data returned by getMyNFTs() contract function\n        * and creates an object of information that is to be displayed\n        */\n        \n        const items = await Promise.all(transaction.map(async i => {\n            const tokenURI = await contract.tokenURI(i.tokenId);\n            let meta = await axios.get(tokenURI);\n            meta = meta.data;\n\n            let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\n            let item = {\n                price,\n                tokenId: i.tokenId.toNumber(),\n                seller: i.seller,\n                owner: i.owner,\n                image: meta.image,\n                name: meta.name,\n                description: meta.description,\n            }\n            sumPrice += Number(price);\n            return item;\n        }))\n\n        updateData(items);\n        updateFetched(true);\n        updateAddress(addr);\n        updateTotalPrice(sumPrice.toPrecision(3));\n    }\n\n    const params = useParams();\n    const tokenId = params.tokenId;\n    if(!dataFetched)\n        getNFTData(tokenId);\n\n    return (\n        <div className=\"profileClass\" style={{\"min-height\":\"100vh\"}}>\n            <Navbar></Navbar>\n            <div className=\"profileClass\">\n            <div className=\"flex text-center flex-col mt-11 md:text-2xl text-white\">\n                <div className=\"mb-5\">\n                    <h2 className=\"font-bold\">Wallet Address</h2>  \n                    {address}\n                </div>\n            </div>\n            <div className=\"flex flex-row text-center justify-center mt-10 md:text-2xl text-white\">\n                    <div>\n                        <h2 className=\"font-bold\">No. of NFTs</h2>\n                        {data.length}\n                    </div>\n                    <div className=\"ml-20\">\n                        <h2 className=\"font-bold\">Total Value</h2>\n                        {totalPrice} ETH\n                    </div>\n            </div>\n            <div className=\"flex flex-col text-center items-center mt-11 text-white\">\n                <h2 className=\"font-bold\">Your NFTs</h2>\n                <div className=\"flex justify-center flex-wrap max-w-screen-xl\">\n                    {data.map((value, index) => {\n                    return <NFTTile data={value} key={index}></NFTTile>;\n                    })}\n                </div>\n                <div className=\"mt-10 text-xl\">\n                    {data.length == 0 ? \"Oops, No NFT data to display (Are you logged in?)\":\"\"}\n                </div>\n            </div>\n            </div>\n        </div>\n    )\n};","C:\\Users\\kayha\\OneDrive\\Desktop\\NFT-Mint-Dapp\\src\\components\\Marketplace.js",[],[],"C:\\Users\\kayha\\OneDrive\\Desktop\\NFT-Mint-Dapp\\src\\components\\NFTpage.js",["71","72","73","74"],[],"import Navbar from \"./Navbar\";\nimport axie from \"../tile.jpeg\";\nimport { useLocation, useParams } from 'react-router-dom';\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\n\nexport default function NFTPage (props) {\n\nconst [data, updateData] = useState({});\nconst [dataFetched, updateDataFetched] = useState(false);\nconst [message, updateMessage] = useState(\"\");\nconst [currAddress, updateCurrAddress] = useState(\"0x\");\n\nasync function getNFTData(tokenId) {\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const addr = await signer.getAddress();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\n    //create an NFT Token\n    var tokenURI = await contract.tokenURI(tokenId);\n    const listedToken = await contract.getListedTokenForId(tokenId);\n    tokenURI = GetIpfsUrlFromPinata(tokenURI);\n    let meta = await axios.get(tokenURI);\n    meta = meta.data;\n    console.log(listedToken);\n\n    let item = {\n        price: meta.price,\n        tokenId: tokenId,\n        seller: listedToken.seller,\n        owner: listedToken.owner,\n        image: meta.image,\n        name: meta.name,\n        description: meta.description,\n    }\n    console.log(item);\n    updateData(item);\n    updateDataFetched(true);\n    console.log(\"address\", addr)\n    updateCurrAddress(addr);\n}\n\nasync function buyNFT(tokenId) {\n    try {\n        const ethers = require(\"ethers\");\n        //After adding your Hardhat network to your metamask, this code will get providers and signers\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n\n        //Pull the deployed contract instance\n        let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n        const salePrice = ethers.utils.parseUnits(data.price, 'ether')\n        updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\")\n        //run the executeSale function\n        let transaction = await contract.executeSale(tokenId, {value:salePrice});\n        await transaction.wait();\n\n        alert('You successfully bought the NFT!');\n        updateMessage(\"\");\n    }\n    catch(e) {\n        alert(\"Upload Error\"+e)\n    }\n}\n\n    const params = useParams();\n    const tokenId = params.tokenId;\n    if(!dataFetched)\n        getNFTData(tokenId);\n    if(typeof data.image == \"string\")\n        data.image = GetIpfsUrlFromPinata(data.image);\n\n    return(\n        <div style={{\"min-height\":\"100vh\"}}>\n            <Navbar></Navbar>\n            <div className=\"flex ml-20 mt-20\">\n                <img src={data.image} alt=\"\" className=\"w-2/5\" />\n                <div className=\"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\">\n                    <div>\n                        Name: {data.name}\n                    </div>\n                    <div>\n                        Description: {data.description}\n                    </div>\n                    <div>\n                        Price: <span className=\"\">{data.price + \" ETH\"}</span>\n                    </div>\n                    <div>\n                        Owner: <span className=\"text-sm\">{data.owner}</span>\n                    </div>\n                    <div>\n                        Seller: <span className=\"text-sm\">{data.seller}</span>\n                    </div>\n                    <div>\n                    { currAddress != data.owner && currAddress != data.seller ?\n                        <button className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\" onClick={() => buyNFT(tokenId)}>Buy this NFT</button>\n                        : <div className=\"text-emerald-700\">You are the owner of this NFT</div>\n                    }\n                    \n                    <div className=\"text-green text-center mt-3\">{message}</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","C:\\Users\\kayha\\OneDrive\\Desktop\\NFT-Mint-Dapp\\src\\components\\Navbar.js",["75","76","77","78","79","80","81","82"],[],"C:\\Users\\kayha\\OneDrive\\Desktop\\NFT-Mint-Dapp\\src\\utils.js",[],[],"C:\\Users\\kayha\\OneDrive\\Desktop\\NFT-Mint-Dapp\\src\\pinata.js",[],[],"C:\\Users\\kayha\\OneDrive\\Desktop\\NFT-Mint-Dapp\\src\\components\\NFTTile.js",["83","84"],[],"import axie from \"../tile.jpeg\";\nimport {\n    BrowserRouter as Router,\n    Link,\n  } from \"react-router-dom\";\n  import { GetIpfsUrlFromPinata } from \"../utils\";\n\nfunction NFTTile (data) {\n    const newTo = {\n        pathname:\"/nftPage/\"+data.data.tokenId\n    }\n\n    const IPFSUrl = GetIpfsUrlFromPinata(data.data.image);\n\n    return (\n        <Link to={newTo}>\n        <div className=\"border-2 ml-12 mt-5 mb-12 flex flex-col items-center rounded-lg w-48 md:w-72 shadow-2xl\">\n            <img src={IPFSUrl} alt=\"\" className=\"w-72 h-80 rounded-lg object-cover\" crossOrigin=\"anonymous\" />\n            <div className= \"text-white w-full p-2 bg-gradient-to-t from-[#454545] to-transparent rounded-lg pt-5 -mt-20\">\n                <strong className=\"text-xl\">{data.data.name}</strong>\n                <p className=\"display-inline\">\n                    {data.data.description}\n                </p>\n            </div>\n        </div>\n        </Link>\n    )\n}\n\nexport default NFTTile;\n",{"ruleId":"85","severity":1,"message":"86","line":4,"column":8,"nodeType":"87","messageId":"88","endLine":4,"endColumn":11},{"ruleId":"85","severity":1,"message":"89","line":2,"column":8,"nodeType":"87","messageId":"88","endLine":2,"endColumn":14},{"ruleId":"85","severity":1,"message":"90","line":7,"column":8,"nodeType":"87","messageId":"88","endLine":7,"endColumn":16},{"ruleId":"85","severity":1,"message":"91","line":9,"column":3,"nodeType":"87","messageId":"88","endLine":9,"endColumn":16},{"ruleId":"85","severity":1,"message":"92","line":12,"column":11,"nodeType":"87","messageId":"88","endLine":12,"endColumn":19},{"ruleId":"85","severity":1,"message":"93","line":2,"column":10,"nodeType":"87","messageId":"88","endLine":2,"endColumn":21},{"ruleId":"94","severity":1,"message":"95","line":91,"column":34,"nodeType":"96","messageId":"97","endLine":91,"endColumn":36},{"ruleId":"85","severity":1,"message":"98","line":2,"column":8,"nodeType":"87","messageId":"88","endLine":2,"endColumn":12},{"ruleId":"85","severity":1,"message":"93","line":3,"column":10,"nodeType":"87","messageId":"88","endLine":3,"endColumn":21},{"ruleId":"94","severity":1,"message":"99","line":100,"column":35,"nodeType":"96","messageId":"97","endLine":100,"endColumn":37},{"ruleId":"94","severity":1,"message":"99","line":100,"column":64,"nodeType":"96","messageId":"97","endLine":100,"endColumn":66},{"ruleId":"85","severity":1,"message":"100","line":1,"column":8,"nodeType":"87","messageId":"88","endLine":1,"endColumn":12},{"ruleId":"85","severity":1,"message":"101","line":4,"column":20,"nodeType":"87","messageId":"88","endLine":4,"endColumn":26},{"ruleId":"85","severity":1,"message":"102","line":5,"column":3,"nodeType":"87","messageId":"88","endLine":5,"endColumn":9},{"ruleId":"85","severity":1,"message":"103","line":6,"column":3,"nodeType":"87","messageId":"88","endLine":6,"endColumn":8},{"ruleId":"85","severity":1,"message":"104","line":8,"column":3,"nodeType":"87","messageId":"88","endLine":8,"endColumn":16},{"ruleId":"85","severity":1,"message":"105","line":9,"column":3,"nodeType":"87","messageId":"88","endLine":9,"endColumn":12},{"ruleId":"106","severity":1,"message":"107","line":57,"column":3,"nodeType":"87","endLine":57,"endColumn":12,"suggestions":"108"},{"ruleId":"94","severity":1,"message":"95","line":58,"column":24,"nodeType":"96","messageId":"97","endLine":58,"endColumn":26},{"ruleId":"85","severity":1,"message":"98","line":1,"column":8,"nodeType":"87","messageId":"88","endLine":1,"endColumn":12},{"ruleId":"85","severity":1,"message":"101","line":3,"column":22,"nodeType":"87","messageId":"88","endLine":3,"endColumn":28},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","'ReactDOM' is defined but never used.","'BrowserRouter' is defined but never used.","'location' is assigned a value but never used.","'useLocation' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'axie' is defined but never used.","Expected '!==' and instead saw '!='.","'logo' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'useRouteMatch' is defined but never used.","'useParams' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'toggleConnect'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [location.pathname] as a second argument to the useEffect Hook.",["109"],{"desc":"110","fix":"111"},"Add dependencies array: [location.pathname]",{"range":"112","text":"113"},[1995,1995],", [location.pathname]"]